#!/usr/bin/env python -B
# code: utf-8
# python2

import argparse, sys, os

import quick_clone.export_db
import quick_clone.import_db

VERSION = "0.0.1"

parser = argparse.ArgumentParser(
    prog="quick_clone",
    usage="quick_clone [sub-command] [options]",
    description="Quickly clone database via MySQL INTO OUTFILE & LOAD DATA INFILE commands",
    epilog="Delorum")

parser.add_argument(
    "-v",
    "--version",
    help="Returns version",
    action="version",
    version="quick_clone " + VERSION)

# SUBCOMMANDS
sub_commands = parser.add_subparsers(
    title="Sub Commands",
    metavar="")

parser_export = sub_commands.add_parser(
    "export",
    usage="quick_clone export [options]",
    help="",
    epilog="")

parser_import = sub_commands.add_parser(
    "import",
    usage="quick_clone import [options]",
    help="",
    epilog="")

# EXPORT OPTIONS
parser_export.add_argument(
    "-u",
    "--user",
    dest="user",
    help="Database Username. Defaults to 'root'.",
    metavar="USER",
    default="root")

parser_export.add_argument(
    "-p",
    "--pass",
    dest="password",
    help="Database Password.",
    metavar="PASS",
    required=True)

parser_export.add_argument(
    "-H",
    "--host",
    dest="host",
    help="Datbase Host. Defaults to '127.0.0.1'",
    metavar="HOST",
    default="127.0.0.1")

parser_export.add_argument(
    "-P",
    "--port",
    dest="port",
    help="Datbase Host. Defaults to 3306",
    metavar="PORT",
    default=3306,
    type=int)

parser_export.add_argument(
    "-d",
    "--database",
    dest="database",
    help="Database Name",
    metavar="DATABASE",
    required=True)

parser_export.add_argument(
    "-l",
    "--location",
    dest="loc",
    help="Preferred directory for export to be placed in. File name will be database name. Defaults to current directory.",
    metavar="FILE",
    default=os.getcwd())

parser_export.add_argument(
    "-t",
    "--tables",
    dest="tables",
    help="Limit tables exported. Comma separated list. Defaults to all tables",
    metavar="TABLE")

# IMPORT OPTIONS
parser_import.add_argument(
    "-u",
    "--user",
    dest="user",
    help="Database Username. Defaults to 'root'.",
    metavar="USER",
    default="root")

parser_import.add_argument(
    "-p",
    "--pass",
    dest="password",
    help="Database Password.",
    metavar="PASS",
    required=True)

parser_import.add_argument(
    "-H",
    "--host",
    dest="host",
    help="Datbase Host. Defaults to '127.0.0.1'",
    metavar="HOST",
    default="127.0.0.1")

parser_import.add_argument(
    "-P",
    "--port",
    dest="port",
    help="Datbase Host. Defaults to 3306",
    metavar="PORT",
    default=3306,
    type=int)

parser_import.add_argument(
    "-d",
    "--database",
    dest="database",
    help="Database Name",
    metavar="DATABASE",
    required=True)

# we need file name since database names are most likely different
parser_import.add_argument(
    "-a",
    "--archive",
    dest="archive",
    help="Relative or absolute path of archive/file to import.",
    metavar="FILE",
    required=True)

def main():
    args = parser.parse_args()
    if sys.argv[1] == "export":
        quick_clone.export_db.execute(args.user, args.password, args.host,  args.port, args.database, args.loc)
    elif sys.argv[1] == "import":
        quick_clone.import_db.execute(args.user, args.password, args.host,  args.port, args.database, args.archive)
    else:
        pass

if __name__ == '__main__':
    main()